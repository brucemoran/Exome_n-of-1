/*
 * ----------------------------------
 *  exome_n-of-1 Nextflow config file
 * ----------------------------------
 * Default config options for all environments.
 */

params {

  //'slug'
  container = 'brucemoran/exome_n-of-1:1.0'

  //for ordering output plots from somaticConsensusVariants
  includeOrder = null

  //germline switch for calling variants with HaplotypeCaller
  germline = null

  //global variables
  params.outDir = "$workflow.launchDir/analysis"
  params.scriptDir = "$workflow.launchDir/scripts"

}

profiles {
  standard {
    includeConfig 'conf/base.config'
    includeConfig 'conf/genome.config' //replace if using under other system
  }

  conda { process.conda = "$baseDir/exome_n-of-1.v1.0.env.yaml" }

  //docker { docker.enabled = true }
  //singularity { singularity.enabled = true }

}

timeline {
  enabled = true
  file = "${params.outDir}/pipeline_info/exome_n-of-1.timeline.html"
}

report {
  enabled = true
  file = "${params.outDir}/pipeline_info/exome_n-of-1.report.html"
}

trace {
  enabled = true
  file = "${params.outDir}/pipeline_info/exome_n-of-1.trace.txt"
}

dag {
  enabled = true
  file = "${params.outDir}/pipeline_info/exome_n-of-1.dag.svg"
}


manifest {
  name = 'brucemoran/exome_n-of-1'
  author = 'Bruce Moran'
  description = 'Exome n-of-1 cancer pipeline allowing multiple somatic vs. single germline variant calling and annotation'
  version = '1.0'
  nextflowVersion = '>=19.04.0'
  homePage = 'https://github.com/brucemoran/Exome_n-of-1'
  mainScript = 'exome_n-of-1.nf'
}


process {

  //containers per process
  withName:lancet { container = "library://bruce.moran/default/variant_callers:lancet.centos7 " }

  //agnostic labels

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
