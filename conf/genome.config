/*
 * -------------------------------------------------
 *  Nextflow config file for IEHG Genome cluster
 * -------------------------------------------------
 * Imported under the 'genome' Nextflow profile in:
 * exome_n-of-1.nextflow.config
 */

process {
  executor = 'pbs'

  //Resource requirements
  //Genome has nodes with 40 cpus, 128GB RAM per node

  withName:bbduk {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:fastp {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 24.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:fastqc {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 24.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:bwamem {
    cpus = { check_max( 20 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:cram {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:mrkdup {
    cpus = { check_max( 20 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:gtkrcl {
    cpus = { check_max( 20 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:gatkgerm {
    cpus = { check_max( 20 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:cpsrreport {
    cpus = { check_max( 10 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:grmflt {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:smaflt {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:mltmet {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 24.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:fctcsv {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 24.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:fctcon {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 24.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:mutct2 {
    cpus = { check_max( 40 * task.attempt, 'cpus') }
    memory = { check_max( 128.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:mutct2_contam {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:mntstr {
    cpus = { check_max( 10 * task.attempt, 'cpus') }
    memory = { check_max( 30.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:111111 {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:111111 {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:111111 {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:111111 {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 12.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
}
